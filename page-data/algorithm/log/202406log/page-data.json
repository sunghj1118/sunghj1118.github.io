{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/log/202406log/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"첫 코테 후기","date":"June 07, 2024"},"html":"<h1>후기</h1>\n<p>살면서 첫 코테를 봤다. 하나는 프로그래머스에서 진행했고 하나는 구름 IDE에서 진행했다. 결론부터 말하자면 두개 모두 탈락했다. 코테 준비를 그동안 많이 못했기 때문에 사실 별로 놀라운 일은 아니었으나, 모든 테케를 해결했음에도 불구하고 두 코테 모두 탈락하게 되어 아쉬웠다.</p>\n<h2>IDE 의존성</h2>\n<p>일단 첫번째로 놀랐던 점은 생각보다 많은걸 외우고 있어야 한다는 점과, 내가 지나치게 IDE에 의존하고 있다는 사실이었다. 물론 자동완성 같은 기능들은 당연히 끄고 문제풀이를 진행하지만, 이외에도 디버깅 브레이크포인트 또는 오타 발견, 라이브러리 추천 등에 너무 익숙해져있던것이 발목을 잡았다. 생각보다 코테 IDE들은 많은 기능들이 생략되었으며, 심지어 디버깅 환경까지 갖춰지지 않았기에 모든걸 출력문을 활용하여 디버깅 해야 했다. 심지어 그 중에서도 출력 터미널에는 출력 제한이 걸려 있었기에, 한번에 최대 5개 줄만 출력되었기에 상당히 답답했다.</p>\n<h2>연습부족</h2>\n<p>의의로 문제 유형들은 다 익숙했으나, 스스로 연습부족으로 인하여 시간이 오래 걸리고 구현이 아쉬운 부분이 있었다. '이게 뭐지? 어떻게 풀어야 할지 감도 안 잡힌다'라는 생각보다는 '아 이거 그건데..어떻게 하더라'라는 생각이 훨씬 많이 들었다. 또한, 테케는 어찌저찌 풀 수는 있었는데, 아마 예상치 못한 케이스나 시간복잡도/공간복잡도를 최적화하는 대에 있어서 실패하여 문제 실패가 떴을거라고 예상한다. 따라서, 연습을 성실히 하는게 얼마나 중요한지 새삼 깨닫게 되었다.</p>\n<h2>테케와 시간복잡도</h2>\n<p>기존에는 문제 풀이에만 집중하고 안 풀리면 여러번 제출했다면, 이번에는 당혹스러웠던 점이 테케가 조금 밖에 제공되지 않으며, 이게 맞았는지 틀렸는지 알 방법이 없었다는 점이다. 스스로 테케를 만들어서 실행해봐야 하며 시간 복잡도를 최대한 깍아서 제출해야 하는 점이 어색했다.</p>\n<h2>앞으로 나아가야 할 방향</h2>\n<p>이제 코테를 통해 어떤 부분이 약하고, 어느 부분을 대비해야 하는지 알았기 때문에 주어진 예상범위를 날카롭게 갈고 닦아야 할것이며, 이에 대하여 테케를 스스로 작성하고 연습하는 방법, 그리고 시간복잡도와 공간복잡도를 계산해서 최적화하는 방법을 연습해볼 예정이다.</p>"}},"pageContext":{"slug":"/algorithm/log/202406log/"}},"staticQueryHashes":[],"slicesMap":{}}