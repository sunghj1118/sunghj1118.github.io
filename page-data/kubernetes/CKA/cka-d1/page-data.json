{"componentChunkName":"component---src-templates-blog-post-js","path":"/kubernetes/CKA/cka-d1/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"CKA 시험 준비 D1","date":"November 21, 2024"},"html":"<h1>CKA 시험 준비 D-1</h1>\n<p>내일 오전 6시에 시험인데 막판에 일이 너무 몰려서 정말 준비가 너무 부족하다. 마음 같아서는 미루고 싶지만 시험 변경이 불가능하고, 25일에 개정되는만큼 해보는데까지 해보려 한다.</p>\n<p>Q. Create a new deployment called nginx-deploy, with image nginx:1.16 and 1 replica. Next upgrade the deployment to version 1.17 using rolling update.</p>\n<ul>\n<li>Deployment : nginx-deploy. Image: nginx:1.16</li>\n<li>Image: nginx:1.16</li>\n<li>Task: Upgrade the version of the deployment to 1:17</li>\n<li>Task: Record the changes for the image upgrade</li>\n</ul>\n<p>A.</p>\n<ol>\n<li>Create a deployment with the image nginx:1.16 and 1 replica.</li>\n</ol>\n<p><code>k create deployment nginx-deploy --image=nginx:1.16 --replicas=1</code></p>\n<ol start=\"2\">\n<li>Set the image to nginx:1.17.</li>\n</ol>\n<p><code>k set image deployment/nginx-deploy  nginx=nginx:1.17</code></p>\n<p>Q. Create a new user called john. Grant him access to the cluster. John should have permission to create, list, get, update and delete pods in the development namespace . The private key exists in the location: /root/CKA/john.key and csr at /root/CKA/john.csr.</p>\n<ul>\n<li>Important Note: As of kubernetes 1.19, the CertificateSigningRequest object expects a signerName.</li>\n<li>Please refer the documentation to see an example. The documentation tab is available at the top right of terminal.</li>\n<li>CSR: john-developer Status:Approved</li>\n<li>Role Name: developer, namespace: development, Resource: Pods</li>\n<li>Access: User 'john' has appropriate permissions</li>\n</ul>\n<p>A.</p>\n<ol>\n<li>Create a CSR for the user john. <code>vim csr.yaml</code>\n<ol>\n<li>Change the crt file into base64 for the csr.yaml file. <code>cat /root/CKA/john.csr | base64 | tr -d \"\\n\"</code></li>\n<li>Create a CSR object for the user john. <code>k create -f csr.yaml</code></li>\n<li>Approve the CSR for the user john. <code>k certificate approve john-developer</code></li>\n</ol>\n</li>\n<li>Create a Role\n<ol>\n<li><code>kubectl create role developer --verb=create,get,list,delete --resource=pods -n development</code></li>\n</ol>\n</li>\n<li>Create Role Binding\n<ol>\n<li><code>kubectl create rolebinding john-developer --role=developer --user=john -n development</code></li>\n</ol>\n</li>\n<li>[optional] Check\n<ol>\n<li><code>k auth can-i get pods --namespace=development --as=john</code></li>\n</ol>\n</li>\n</ol>\n<p>Q. Create a nginx pod called nginx-resolver using image nginx, expose it internally with a service called nginx-resolver-service. Test that you are able to look up the service and pod names from within the cluster. Use the image: busybox:1.28 for dns lookup. Record results in /root/CKA/nginx.svc and /root/CKA/nginx.pod</p>\n<ul>\n<li>Pod: nginx-resolver created</li>\n<li>Service DNS Resolution recorded correctly</li>\n<li>Pod DNS resolution recorded correctly</li>\n</ul>\n<p>A.</p>\n<ol>\n<li>Create a pod called nginx-resolver using image nginx.\n<ol>\n<li><code>k run nginx-resolver --image=nginx</code></li>\n</ol>\n</li>\n<li>Expose the pod internally with a service called nginx-resolver-service.\n<ol>\n<li><code>k expose pod nginx-resolver --name=nginx-resolver-service --port=80</code></li>\n</ol>\n</li>\n<li>Create busybox pod for dns lookup.\n<ol>\n<li><code>k run busybox --image=busybox:1.28 -- sleep 4000</code></li>\n</ol>\n</li>\n<li>Do nslookup for the service and pod names.\n<ol>\n<li>SVC: Enter the busybox pod to nslookup and save it to file. <code>k exec busybox -- nslookup nginx-resolver-service > /root/CKA/nginx.svc</code></li>\n<li>POD:\n<ol>\n<li>Get ip address of the nginx-resolver pod. <code>k get pod nginx-resolver -o wide</code></li>\n<li>Enter the busybox pod to nslookup and save it to file. <code>k exec busybox -- nslookup 10-244-192-1.default.pod.cluster.local > /root/CKA/nginx.pod</code></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>Q. Create a static pod on node01 called nginx-critical with image nginx and make sure that it is recreated/restarted automatically in case of a failure.</p>\n<ul>\n<li>Use /etc/kubernetes/manifests as the Static Pod path for example.</li>\n</ul>\n<p>A.</p>\n<ol>\n<li>Get the node name. <code>k get nodes -o wide</code></li>\n<li>Create a dry-run yaml file for the static pod.\n<ol>\n<li><code>k run nginx-critical --image=nginx --restart=Always --dry-run=client -o yaml</code></li>\n</ol>\n</li>\n<li>Create a static pod on node01.\n<ol>\n<li><code>cat > /etc/kubernetes/manifests/nginx-critical.yaml</code></li>\n</ol>\n</li>\n</ol>"}},"pageContext":{"slug":"/kubernetes/CKA/cka-d1/"}},"staticQueryHashes":[],"slicesMap":{}}