{"componentChunkName":"component---src-templates-blog-post-js","path":"/kubernetes/CKA/cka1/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"1차 모의고사 기출문제","date":"September 12, 2024"},"html":"<h1>1차 모의고사 기출문제</h1>\n<ol>\n<li>Deploy a pod named nginx-pod using the nginx:alpine image.</li>\n</ol>\n<p><code>kubectl run nginx-pod --image=nginx:alpine</code></p>\n<ol start=\"2\">\n<li>Deploy a redis pod using the redis:alpine image with the labels set to tier=db.</li>\n</ol>\n<p><code>kubectl run redis --image=redis:alpine --labels=tier=db</code></p>\n<ol start=\"3\">\n<li>Create a service redis-service to expose the redis application within the cluster on port 6379.</li>\n</ol>\n<p><code>kubectl expose pod redis --port=6379 --name=redis-service</code></p>\n<ol start=\"4\">\n<li>Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas.</li>\n</ol>\n<p><code>kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3</code></p>\n<ol start=\"5\">\n<li>Create a new pod called custom-nginx using the nginx image and run it on container port 8080.</li>\n</ol>\n<p><code>kubectl run custom-nginx --image=nginx --port=8080</code></p>\n<ol start=\"6\">\n<li>Create a new namespace called dev-ns.</li>\n</ol>\n<p><code>kubectl create namespace dev-ns</code></p>\n<ol start=\"7\">\n<li>Create a new deployment called redis-deploy in the dev-ns namespace with the redis image. It should have 2 replicas.</li>\n</ol>\n<p><code>kubectl create deployment redis-deploy --image=redis --replicas=2 -n dev-ns</code></p>\n<p>이때, 일반적인 <code>kubectl get deployments</code>로 하면 방금 생성한 deployment가 안보인다. 이때는 namespace를 다음과 같이 지정해주면 된다: <code>kubectl get deployments -n dev-ns</code></p>\n<ol start=\"8\">\n<li>Create a pod called httpd using the image httpd:alpine in the default namespace. Next, create a service of type ClusterIP by the same name (httpd). The target port for the service should be 80.</li>\n</ol>\n<p><code>kubectl run httpd --image=httpd:alpine</code>\n<code>kubectl expose pod httpd --port=80 --type=ClusterIP --name=httpd</code></p>\n<p>이렇게 했는데, 보니까 <code>kubectl run httpd --image=httpd:alpine --port=80 --expose</code>로 한번에 할 수 있었다. 보니까 ClusterIP가 default값이라서 생략해도 되는것 같다.</p>\n<ol start=\"9\">\n<li>Get the list of nodes in JSON format and store it in a file at /opt/outputs/nodes-z3444kd9.json.</li>\n</ol>\n<p><code>kubectl get nodes -o json > /opt/outputs/nodes-z3444kd9.json</code></p>\n<ol start=\"10\">\n<li>Create a service messaging-service to expose the messaging application within the cluster on port 6379.</li>\n</ol>\n<p><code>kubectl expose pod messaging --port=6379 --name=messaging-service</code></p>\n<ol start=\"11\">\n<li>Create a deployment named hr-web-app using the image kodekloud/webapp-color with 2 replicas.</li>\n</ol>\n<p><code>kubectl create deployment hr-web-app --image=kodekloud/webapp-color --replicas=2</code></p>\n<ol start=\"12\">\n<li>Create a static pod named static-busybox on the controlplane node that uses the busybox image and the command sleep 1000.</li>\n</ol>\n<p><code>grep -i staticPodPath /var/lib/kubelet/config.yaml</code>로 static pod의 경로를 찾아서 그 경로에 pod를 만들면 된다.\n<code>vim /etc/kubernetes/manifests/static-busybox.yaml</code>로 만들어서 아래 내용을 넣어주면 된다.</p>\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: static-busybox\nspec:\n  containers:\n  - name: static-busybox\n    image: busybox\n    command: [\"sleep\", \"1000\"]\n</code></pre>\n<ol start=\"13\">\n<li>Create a POD in the finance namespace named temp-bus with the image redis:alpine.</li>\n</ol>\n<p><code>kubectl run temp-bus --image=redis:alpine --namespace=finance</code></p>\n<ol start=\"14\">\n<li>A new application orange is deployed. There is something wrong with it. Identify and fix the issue.</li>\n</ol>\n<p>yaml 파일 다시 수정. CKA 준비 1일차에 더 자세히 적어놓았다.</p>\n<ol start=\"15\">\n<li>Expose the hr-web-app created in the previous task as a service named hr-web-app-service, accessible on port 30082 on the nodes of the cluster.</li>\n</ol>\n<p>The web application listens on port 8080.</p>\n<p>hr-web-app이라는 이름을 갖고 있는 NodePort 서비스를 만들고, 8080에 노출한다.\n<code>kubectl expose deployment hr-web-app --name=hr-web-app-service --type=NodePort --port=8080</code></p>\n<p><code>kubectl edit service hr-web-app-service</code>에 들어가서 nodePort를 수정한다.</p>\n<pre><code class=\"language-yaml\">  ports:\n  - nodePort: 31718\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  - nodePort: 30082\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n</code></pre>\n<ol start=\"16\">\n<li>Use JSON PATH query to retrieve the osImages of all the nodes and store it in a file /opt/outputs/nodes_os_x43kj56.txt.</li>\n</ol>\n<p>The osImage are under the nodeInfo section under status of each node.</p>\n<p><code>kubectl get nodes -o jsonpath='{.items[*].status.nodeInfo.osImage}' > /opt/outputs/nodes_os_x43kj56.txt</code></p>\n<ul>\n<li><code>kubectl get nodes</code>로 노드 정보를 가져온다.</li>\n<li><code>-o jsonpath</code>로 jsonpath를 사용한다.</li>\n<li><code>{.items[*].status.nodeInfo.osImage}</code>로 osImage를 가져온다.\n<ul>\n<li><code>items[*]</code>로 모든 노드를 가져온다.</li>\n<li><code>status.nodeInfo.osImage</code>로 osImage를 가져온다.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"17\">\n<li>Create a Persistent Volume with the given specification: -</li>\n</ol>\n<p>Volume name: pv-analytics<br>\nStorage: 100Mi<br>\nAccess mode: ReadWriteMany<br>\nHost path: /pv/data-analytics</p>\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: pv-analytics\nspec:\n  capacity:\n    storage: 100Mi\n  accessModes:\n    - ReadWriteMany\n  hostPath:\n    path: \"/pv/data-analytics\"\n</code></pre>\n<p><code>kubectl apply -f pv.yaml</code>로 만들어준다.</p>\n<h2>마무리</h2>\n<ul>\n<li>3번은 create service를 하는게 아니라 expose라는걸 써서 헷갈린다.</li>\n<li>ClusterIP가 default값이라서 생략해도 되는것 같다.</li>\n<li>같은 이름의 pod와 service를 만들때는 <code>kubectl run</code>으로 pod를 만들고 <code>--expose</code>로 service를 만들면 된다.</li>\n</ul>"}},"pageContext":{"slug":"/kubernetes/CKA/cka1/"}},"staticQueryHashes":[],"slicesMap":{}}