{"componentChunkName":"component---src-templates-blog-post-js","path":"/kubernetes/CKA/cka-mock2/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"2차 모의고사 기출문제","date":"November 10, 2024"},"html":"<h1>2차 모의고사 기출문제</h1>\n<ol>\n<li>Take a backup of the etcd cluster and save it to /opt/etcd-backup.db.</li>\n</ol>\n<p><code>export ETCDCTL_API=3</code>\n<code>etcdctl snapshot save /opt/etcd-backup.db</code></p>\n<ol start=\"2\">\n<li>Create a Pod called redis-storage with image: redis:alpine with a Volume of type emptyDir that lasts for the life of the Pod.</li>\n</ol>\n<p>Specs on the below.</p>\n<ul>\n<li>Pod named 'redis-storage' created</li>\n<li>Pod 'redis-storage' uses Volume type of emptyDir</li>\n<li>Pod 'redis-storage' uses volumeMount with mountPath = /data/redis</li>\n</ul>\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: redis-storage\nspec:\n  containers:\n  - name: redis-storage\n    image: redis:alpine\n    volumeMounts:\n      - mountPath: /data/redis\n        name: redis-storage-volume\n  volumes:\n  - name: redis-storage-volume\n    emptyDir: {}\n</code></pre>\n<ol start=\"3\">\n<li>Create a new pod called super-user-pod with image busybox:1.28. Allow the pod to be able to set system_time.</li>\n</ol>\n<p>The container should sleep for 4800 seconds.<br>\nPod: super-user-pod<br>\nContainer Image: busybox:1.28<br>\nIs SYS_TIME capability set for the container?</p>\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: super-user-pod\nspec:\n  containers:\n  - name: super-user-container\n    image: busybox:1.28\n    command: [\"sleep\", \"4800\"]\n    securityContext:\n      capabilities:\n        add: [\"SYS_TIME\"]\n</code></pre>\n<ol start=\"4\">\n<li>A pod definition file is created at /root/CKA/use-pv.yaml. Make use of this manifest file and mount the persistent volume called pv-1. Ensure the pod is running and the PV is bound.</li>\n</ol>\n<p>mountPath: /data<br>\npersistentVolumeClaim Name: my-pvc<br>\npersistentVolume Claim configured correctly<br>\npod using the correct mountPath<br>\npod using the persistent volume claim?</p>\n<p>step1: create PVC to bind with PV</p>\n<p><code>vim pvc.yaml</code></p>\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: my-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Filesystem\n  resources:\n    requests:\n      storage: 10Mi\n</code></pre>\n<p><code>kubectl apply -f pvc.yaml</code></p>\n<p>step2: edit existing pod yaml file to use PVC</p>\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: use-pv\n  name: use-pv\nspec:\n  containers:\n  - image: nginx\n    name: use-pv\n    resources: {}\n    volumeMounts:\n    - mountPath: \"/data\"\n      name: mypd\n  volumes:\n  - name: mypd\n    persistentVolumeClaim:\n      claimName: my-pvc\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n</code></pre>\n<p><code>kubectl apply -f /root/CKA/use-pv.yaml</code></p>\n<p><code>kubectl get pvc my-pvc</code></p>\n<p><code>kubectl get pod use-pv</code></p>\n<ol start=\"5\">\n<li>Create a new deployment called nginx-deploy, with image nginx:1.16 and 1 replica. Next upgrade the deployment to version 1.17 using rolling update.</li>\n</ol>\n<ul>\n<li>Deployment : nginx-deploy. Image: nginx:1.16</li>\n<li>Image: nginx:1.16</li>\n<li>Task: Upgrade the version of the deployment to 1:17</li>\n<li>Task: Record the changes for the image upgrade</li>\n</ul>\n<ol>\n<li>Create a deployment with image nginx:1.16 and 1 replica</li>\n</ol>\n<p><code>kubectl create deployment nginx-deploy --image=nginx:1.16 --replicas=1</code></p>\n<ol start=\"2\">\n<li>Upgrade the deployment to version 1.17</li>\n</ol>\n<p><code>kubectl set image deployment/nginx-deploy nginx=nginx:1.17 --record</code></p>\n<ol start=\"6\">\n<li>Create a new user called john. Grant him access to the cluster. John should have permission to create, list, get, update and delete pods in the development namespace . The private key exists in the location: /root/CKA/john.key and csr at /root/CKA/john.csr.</li>\n</ol>\n<ul>\n<li>Important Note: As of kubernetes 1.19, the CertificateSigningRequest object expects a signerName.</li>\n<li>Please refer the documentation to see an example. The documentation tab is available at the top right of terminal.</li>\n<li>CSR: john-developer Status:Approved</li>\n<li>Role Name: developer, namespace: development, Resource: Pods</li>\n<li>Access: User 'john' has appropriate permissions</li>\n</ul>\n<p>Steps:</p>\n<ol>\n<li>\n<p>Create a Certificate Signing Request (CSR)</p>\n</li>\n<li>\n<p>Approve the CSR</p>\n</li>\n<li>\n<p>Create a Role</p>\n</li>\n<li>\n<p>Create a RoleBinding</p>\n</li>\n<li>\n<p>Generate a kubeconfig file for John</p>\n</li>\n<li>\n<p>Create a CSR for john</p>\n</li>\n</ol>\n<p>step 1: create CSR</p>\n<pre><code class=\"language-bash\">cat &#x3C;&#x3C; EOF | kubectl apply -f -\napiVersion: certificates.k8s.io/v1\nkind: CertificateSigningRequest\nmetadata:\n  name: john-developer\nspec:\n  request: $(cat /root/CKA/john.csr | base64 | tr -d '\\n')\n  signerName: kubernetes.io/kube-apiserver-client\n  usages:\n  - client auth\nEOF\n</code></pre>\n<p>step 2: approve CSR<br>\n<code>kubectl certificate approve john-developer</code></p>\n<p>step 3: create role<br>\n<code>kubectl create role developer --verb=create,list,get,update,delete --resource=pods -n development</code></p>\n<p>step 4: create rolebinding<br>\n<code>kubectl create rolebinding john-developer --role=developer --user=john -n development</code></p>\n<p>step 5: generate kubeconfig file for john<br>\n<code>kubectl get csr john-developer -o jsonpath='{.status.certificate}' | base64 -d > john.crt</code></p>\n<p>TO_VERIFY:</p>\n<pre><code class=\"language-bash\">kubectl auth can-i create pods --as=john -n development\nkubectl auth can-i list pods --as=john -n development\nkubectl auth can-i get pods --as=john -n development\nkubectl auth can-i update pods --as=john -n development\nkubectl auth can-i delete pods --as=john -n development\n</code></pre>\n<ol start=\"7\">\n<li>Create a nginx pod called nginx-resolver using image nginx, expose it internally with a service called nginx-resolver-service. Test that you are able to look up the service and pod names from within the cluster. Use the image: busybox:1.28 for dns lookup. Record results in /root/CKA/nginx.svc and /root/CKA/nginx.pod</li>\n</ol>\n<ul>\n<li>Pod: nginx-resolver created</li>\n<li>Service DNS Resolution recorded correctly</li>\n<li>Pod DNS resolution recorded correctly</li>\n</ul>\n<p>모르겠다. 계속 틀린다. pod랑 service를 bash로 temp busybox 하나 만들어서 보려고 하는데 이게 아닌것 같다.</p>\n<p><strong>끝나고 풀이를 보니까 다음과 같다:</strong></p>\n<p>step 1:</p>\n<ul>\n<li>Use the command kubectl run and create a nginx pod and busybox pod. Resolve it, nginx service and its pod name from busybox pod.</li>\n<li>To create a pod nginx-resolver and expose it internally:</li>\n</ul>\n<p><code>kubectl run nginx-resolver --image=nginx</code><br>\n<code>kubectl expose pod nginx-resolver --name=nginx-resolver-service --port=80 --target-port=80 --type=ClusterIP</code></p>\n<p>step 2:<br>\nTo create a pod test-nslookup. Test that you are able to look up the service and pod names from within the cluster:</p>\n<p><code>kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup nginx-resolver-service</code><br>\n<code>kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup nginx-resolver-service > /root/CKA/nginx.svc</code></p>\n<p>step 3:<br>\nGet the IP of the nginx-resolver pod and replace the dots(.) with hyphon(-) which will be used below.</p>\n<p><code>kubectl get pod nginx-resolver -o wide</code><br>\n<code>kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup &#x3C;P-O-D-I-P.default.pod> > /root/CKA/nginx.pod</code></p>\n<ol start=\"8\">\n<li>Create a static pod on node01 called nginx-critical with image nginx and make sure that it is recreated/restarted automatically in case of a failure.</li>\n</ol>\n<ul>\n<li>Use /etc/kubernetes/manifests as the Static Pod path for example.</li>\n<li>static pod configured under /etc/kubernetes/manifests ?</li>\n<li>Pod nginx-critical-node01 is up and running</li>\n</ul>\n<p>답:</p>\n<ul>\n<li><code>ssh node01</code></li>\n<li><code>mkdir /etc/kubernetes/manifests</code></li>\n<li><code>cd /etc/kubernetes/manifests</code></li>\n<li><code>vim nginx-critical.yaml</code></li>\n<li><code>kubectl get pods -o wide | grep nginx-critical</code></li>\n</ul>\n<h2>마무리</h2>\n<p>1번 모의고사보다 어렵다. 이런 식으로 나오면 당황할 것 같다. 더 열심히 공부해야겠다.</p>"}},"pageContext":{"slug":"/kubernetes/CKA/cka-mock2/"}},"staticQueryHashes":[],"slicesMap":{}}