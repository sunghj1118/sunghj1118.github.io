{"version":3,"file":"component---src-pages-using-typescript-tsx-f912a39908a0ccf2e24c.js","mappings":"6LAaA,MAgCaA,EAA0BA,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAlCwDC,IAAA,IAAC,KACvDC,EAAI,SACJC,GACDF,EAAA,OACCH,EAAAA,cAACM,EAAAA,EAAM,KACLN,EAAAA,cAAA,UAAI,mBACcA,EAAAA,cAAA,SAAG,0BAErBA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,YAAe,0CAClCA,EAAAA,cAAA,YAAM,YAAe,qCACzCA,EAAAA,cAAA,YAAM,oBAAuB,MAEvCA,EAAAA,cAAA,SAAG,4CACwCA,EAAAA,cAAA,YAAM,cAAiB,oBACxDA,EAAAA,cAAA,YAAM,cAAiB,gBAAaA,EAAAA,cAAA,YAAM,YAAe,UAEnEA,EAAAA,cAAA,SAAG,gCAC4BA,EAAAA,cAAA,YAAOK,EAASE,UAAgB,uBACnDH,EAAKI,KAAKC,UAAU,KAEhCT,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,+EChCX,MANkBC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,YAAAC,YAAA,gBAAVJ,CAAU,mDCC5B,MAAMK,EAAkBL,EAAAA,QAAOM,OAAMJ,WAAA,CAAAC,YAAA,0BAAAC,YAAA,eAAbJ,CAAa,mIAS/BO,EAAaP,EAAAA,QAAOQ,EAACN,WAAA,CAAAC,YAAA,qBAAAC,YAAA,eAARJ,CAAQ,4EAiB3B,MATeS,IACbtB,EAAAA,cAACkB,EAAe,KACdlB,EAAAA,cAAA,SAAG,MAAG,IAAIuB,MAAOC,cAAc,wCAC/BxB,EAAAA,cAAA,SACEA,EAAAA,cAACoB,EAAU,CAACV,KAAK,iCAAgC,YCnBvD,MAAMe,GAAcC,EAAAA,EAAAA,mBAAiB,wLA2BrC,MAVevB,IAAA,IAAC,SAAEwB,GAAUxB,EAAA,OAC1BH,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACyB,EAAW,MACZzB,EAAAA,cAAC4B,EAAS,KACPD,GAEH3B,EAAAA,cAACsB,EAAM,MAAG,IACT,C,+CCaL,IAlCA,SAAYnB,GAAoC,IAAD0B,EAAAC,EAAA,IAAlC,YAAEC,EAAW,MAAE7B,EAAK,SAAEyB,GAAUxB,EAC3C,MAAM,KAAEK,IAASwB,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBF,GAAevB,EAAK0B,aAAaH,YACnDI,EAAgC,QAApBN,EAAGrB,EAAK0B,oBAAY,IAAAL,OAAA,EAAjBA,EAAmB3B,MAExC,OACEF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQmC,EAAgB,GAAEjC,OAAWiC,IAAiBjC,GACtDF,EAAAA,cAAA,QAAMoC,KAAK,cAAcC,QAASJ,IAClCjC,EAAAA,cAAA,QAAMsC,SAAS,WAAWD,QAASnC,IACnCF,EAAAA,cAAA,QAAMsC,SAAS,iBAAiBD,QAASJ,IACzCjC,EAAAA,cAAA,QAAMsC,SAAS,UAAUD,QAAQ,YACjCrC,EAAAA,cAAA,QAAMoC,KAAK,eAAeC,QAAQ,YAClCrC,EAAAA,cAAA,QAAMoC,KAAK,kBAAkBC,SAA0B,QAAjBP,EAAAtB,EAAK0B,oBAAY,IAAAJ,OAAA,EAAjBA,EAAmBS,SAAW,KACpEvC,EAAAA,cAAA,QAAMoC,KAAK,gBAAgBC,QAASnC,IACpCF,EAAAA,cAAA,QAAMoC,KAAK,sBAAsBC,QAASJ,IACzCN,EAGP,C","sources":["webpack://my-blog/./src/pages/using-typescript.tsx","webpack://my-blog/./src/components/Container.js","webpack://my-blog/./src/components/Footer.js","webpack://my-blog/./src/components/layout.js","webpack://my-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","// src/components/Container.js\n\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  max-width: 700px;\n  margin: 0 auto;\n  padding: 0 20px;\n`;\n\nexport default Container;\n","// src/components/Footer.js\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst FooterContainer = styled.footer`\n  background: #f0f0f0;\n  padding: 0.5rem;\n  text-align: center;\n  font-size: 0.8rem;\n  border-top: 1px solid #ccc; \n  font-family: 'Lato', sans-serif;\n`;\n\nconst FooterLink = styled.a`\n  color: #007BFF;\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst Footer = () => (\n  <FooterContainer>\n    <p>Â© {new Date().getFullYear()} HyunJoon Sung. All Rights Reserved.</p>\n    <p>\n      <FooterLink href=\"https://github.com/sunghj1118\">GitHub</FooterLink>\n    </p>\n  </FooterContainer>\n);\n\nexport default Footer;\n","// src/components/layout.js\n\nimport React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport Container from './Container';\nimport Footer from './Footer'; // Import the Footer component\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: 'Roboto', sans-serif; // Default font\n    background-color: #f5f5f5; // Light background for better contrast\n    margin: 0;\n    padding: 0;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Montserrat', sans-serif; // Headings font\n  }\n\n  button {\n    font-family: 'Poppins', sans-serif; // Button font\n  }\n`;\n\nconst Layout = ({ children }) => (\n  <>\n    <GlobalStyle />\n    <Container>\n      {children}\n    </Container>\n    <Footer /> {/* Add the Footer component here */}\n  </>\n);\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","location","Layout","pathname","site","buildTime","href","Link","to","styled","div","withConfig","displayName","componentId","FooterContainer","footer","FooterLink","a","Footer","Date","getFullYear","GlobalStyle","createGlobalStyle","children","Container","_site$siteMetadata","_site$siteMetadata2","description","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","author"],"sourceRoot":""}